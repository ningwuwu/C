//game.h
#ifndef __GAME__H__
#define __GAME__H__
#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
#define ROW 9
#define COL 9
#define ROWS ROW+2
#define COLS COL+2

void InitBoard(char mine[ROWS][COLS],int rows,int cols,char a);
int SelectLevel(int n);
void DisplayBoard(char mine[ROWS][COLS],int rows,int cols);
void SetMine(char mine[ROWS][COLS],int rows,int cols,int n);
void SafeMine(char show[ROWS][COLS],char mine[ROWS][COLS],int rows,int cols);
int SweepMine(char mine[ROWS][COLS],char show[ROWS][COLS],int rows,int cols,int x,int y);
void CheckRound(char mine[ROWS][COLS],char show[ROWS][COLS],int x,int y);
int  MineNum(char mine[ROWS][COLS],int rows,int cols);
int CountShow(char show[ROWS][COLS],int rows, int cols);
#endif

//game.c
#include "game.h"
void InitBoard(char show[ROWS][COLS],int rows,int cols,char a)
{
	int i = 0;
	int j = 0;
	for (i = 0;i <= rows;i++)
	{
		for (j = 0;j <= cols;j++)
		{
			show[i][j] = a ;
		}
	}
}
int  SelectLevel(int n)
{
	int count = 0;
	switch (n)
	{
	case 1:
		{
			count = 10;
			break;
		}
	case 2:
		{
			count = 20;
			break;
		}
	case 3:
		{
			count = 30;
			break;
		}
	default :
		{
			printf ("输入有误，请重输\n");
			break;
		}
	}
	return count;
}
void DisplayBoard(char show[ROWS][COLS],int rows,int cols)
{
	int i = 0;
	int j = 0;
	for (j = 0;j <= cols-2;j++)
	{
		printf (" %d ",j);
	}
	printf ("\n");
	for (i = 1;i <= rows-2;i++)
	{
		printf (" %d ",i);
		for (j = 0;j <= cols-3;j++)
		{
			printf (" %c ",show[i][j]);
		}
		printf ("\n");
	}
	
}
void SetMine(char mine[ROWS][COLS],int rows,int cols,int n)
{
	int i = 0;
	int j = 0;
	int count = n;
	while (count)
	{
		i = rand() % rows + 1;
		j = rand() % cols + 1;
		if ((mine[i][j] == '0')&&(i > 1)&&(i <= rows)&&(j > 1)&&(j <= cols))
		{
			mine[i][j] = '1';
			count--;
		}
	}
}
int  MineNum(char mine[ROWS][COLS],int rows,int cols)
{
	int count = 0;  
    if (mine[rows - 1][cols - 1] == '1') 
    {  
        count++;  
    }  
    if (mine[rows - 1][cols] == '1')  
    {  
        count++;  
    }  
    if (mine[rows - 1][cols + 1] == '1')  
    {  
        count++;  
    }  
    if (mine[rows][cols - 1] == '1')
    {  
        count++;  
    }  
    if (mine[rows][cols + 1] == '1')  
    {  
        count++;  
    }  
    if (mine[rows+ 1][cols - 1] == '1')  
    {  
        count++;  
    }  
    if (mine[rows + 1][cols] == '1')  
    {  
        count++;  
    }  
    if (mine[rows + 1][cols + 1] == '1')
    {  
        count++;  
    }  
    return  count; 
}
int SweepMine(char mine[ROWS][COLS],char show[ROWS][COLS],int rows,int cols,int x,int y)
{
	int ret = 0;
	if ((x > 0)&&(x <= rows)&&(y > 0)&&(y <= cols))
	{
		if (mine[x][y] = '1')
		{
		show[ROWS][COLS] = 'X';
		return 0;
		}
		else
		{
			ret = MineNum(mine,x,y);
			show[x][y] = ret + '0';
			CheckRound(mine,show,x,y);
		}
	}
	return 1;
}
void SafeMine(char show[ROWS][COLS],char mine[ROWS][COLS],int rows,int cols)
{
	int x = 0;
    int y = 0;
    char ch = 0;
    int count = 0;
    int ret = 1;
    printf("输入坐标扫雷\n");
    while (1)
    {
        scanf("%d%d", &x, &y);
        if ((x >= 1 && x <= rows) && (y >= 1 && y <= cols))
        {
            if (mine[x][y] == '1')
            {
                mine[x][y] = '0';
                ch = MineNum(mine,x,y);
                show[x][y] = ch + '0';
                 CheckRound(mine,show, x, y);
                while (ret)
                {
                    int x = rand() % ROWS + 1;
                    int y = rand() % COLS + 1;
                    if (mine[x][y] == '0')
                    {
                        mine[x][y] = '1';
                        ret--;
                        break;
                    }
                }break; 
            }
            if (mine[x][y] == '0')
            {
               ch = MineNum(mine,x,y);
                show[x][y] = ch + '0';
                CheckRound(mine,show, x, y);
                break;
            }
        }
        else
        {
            printf("输入错误重新输入\n");
        }
    }
}
void CheckRound(char mine[ROWS][COLS],char show[ROWS][COLS],int x,int y)
{
	int ret;
	ret = MineNum(mine,x,y);
	if (ret = 0)
	{
		show[x][y]='0'; 
	    if ((x-1)>0&&(y-1)>0&&(show[x-1][y-1]=='*'))  
            CheckRound(mine,show,x-1,y-1);  
        if ((x-1)>0&&(y)>0&&(show[x-1][y]=='*'))  
            CheckRound(mine,show,x-1,y);  
        if ((x-1)>0&&(y+1)>0&&(show[x-1][y+1]=='*'))  
            CheckRound(mine,show,x-1,y+1);  
        if ((x)>0&&(y-1)>0&&(show[x][y-1]=='*'))  
            CheckRound(mine,show,x,y-1);  
        if ((x)>0&&(y+1)>0&&(show[x][y+1]=='*'))  
            CheckRound(mine,show,x,y+1);  
        if ((x+1)>0&&(y-1)>0&&(show[x+1][y-1]=='*'))  
            CheckRound(mine,show,x+1,y-1);  
        if ((x+1)>0&&(y)>0&&(show[x+1][y]=='*'))  
            CheckRound(mine,show,x+1,y);  
        if ((x+1)>0&&(y+1)>0&&(show[x+1][y+1]=='*'))  
            CheckRound(mine,show,x+1,y+1);  
    }else  
        show[x][y]=ret+'0';  
}  
int CountShow(char show[ROWS][COLS],int rows, int cols)
{
    int count = 0;
    int i = 0;
    int j = 0;
    for (i = 1; i <= rows; i++)
    {
        for (j = 1; j <= cols; j++)
        {
            if (show[i][j] == '*')
            {
                count++;
            }
        }

    }
    return count;
}

//test.c
#include "game.h"


void menu()
{
	printf("*******************************************\n");
    printf("********       1、play           **********\n");
    printf("********       0、exit           **********\n");
    printf("*******************************************\n");
}
void test()
{
	int input = 0;
	do
	{
		menu();
		printf ("请选择：\n");
		scanf_s("%d",&input);
		switch(input)
		{
			case 1:
				{
					game();
					break;
				}
			case 0:
				{
					break;
				}
			default:
				{
					printf ("输入有误，请重输\n");
					break;
				}
		}
	}while (1);
}
int game()
{
	int n = 0;
	int m = 0;
	int i = 0;
	int j = 0;
	int q = 0;
	int ret = 0;
	char mine[ROWS][COLS] = {0};
	char show[ROWS][COLS] = {0};
	InitBoard( mine, ROWS, COLS, '0');
	printf ("请选择难度>1 2 3\n");
	scanf_s("%d",&n);
	m = SelectLevel(n);
	SetMine( mine,ROWS, COLS,m) ;  
    InitBoard( show, ROWS, COLS, '*');
    DisplayBoard( show, ROWS, COLS); 
    SafeMine( mine,show,ROWS,COLS);
    DisplayBoard( show, ROWS, COLS);

    while(1)
    {  
        printf("请输入坐标\n");
        scanf("%d %d",&i,&j);
        SweepMine(mine, show, ROWS, COLS, i, j);
        q = CountShow(show, ROW, COL);
        if(m == q )
        {   

            printf("恭喜你，你赢了\n");
            DisplayBoard( show, ROWS, COLS);
             break;
        }
        if( SweepMine(mine, show, ROWS, COLS, i, j) == 0 )
        {
            printf("你被炸死了\n");
            DisplayBoard( show, ROWS, COLS);
            printf("布雷图\n");
            DisplayBoard( mine, ROWS, COLS);  
              break;
        }     
        DisplayBoard(show, ROWS, COLS);
	}
	return 0;
}
int main()
{
	test();
	srand((unsigned int)time(NULL));
	return 0;
}
