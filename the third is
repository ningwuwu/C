//.h
#ifndef __GAME_H__  
#define __GMME_H__ 
#include<stdio.h>  
#include<stdlib.h>  
#include<string.h>  
#include<time.h> 
#define ROWS 3  
#define COLS 3  
void init_board(char board[ROWS][COLS], int rows,int  cols);//初始化棋盘  
void display_board(char board[ROWS][COLS], int rows, int  cols);//打印棋盘  
void player_move(char board[ROWS][COLS], int rows, int  cols);//实现玩家下棋的函数  
void computer_move(char board[ROWS][COLS], int rows, int  cols);//实现电脑下棋的函数  
char check_win(char board[ROWS][COLS], int rows, int  cols);//判断输赢的函数  
#endif //__GAME_H__  

//.c
#define _CRT_SECURE_NO_WARNINGS 1   
#include"game.h"  
void init_board(char board[ROWS][COLS], int rows, int  cols)  
{  
    memset(board, ' ', sizeof(char)*rows*cols); 
}  
void display_board(char board[ROWS][COLS], int rows, int  cols)  
{  
    int i = 0;  
    for (i = 0; i < rows; i++)  
    {  
        printf(" %c | %c | %c \n", board[i][0], board[i][1], board[i][2]);  
        if (i != rows - 1)  
            printf("---|---|---\n");  
    }  
}  
void player_move(char board[ROWS][COLS], int rows, int  cols)  
{  
    int x = 0;  
    int y = 0;  
    while (1)  
    {  
        printf("please enter the coordinates:>");  
        scanf("%d%d", &x, &y);  
        x--;  
        y--;  
        if ((x >= 0) && (x <= rows - 1) && (y >= 0) && (y <= cols - 1))  
        {  
            if (board[x][y] == ' ')  
            {  
                board[x][y] = 'X';  
                break;  
            }  
            else  
            {  
                printf("please enter again:>\n");  
            }  
        }  
    }  
}  
void computer_move(char board[ROWS][COLS], int rows, int  cols)  
{  
	if (board[1][1] == ' ')
		board[1][1] = '0';
	/*else if((board[ROWS][0] == board[ROWS][1])&&(board[ROWS][0] != board[ROWS][2]))
		board[ROWS][2] = '0';
	else if((board[ROWS][0] == board[ROWS][2])&&(board[ROWS][0] != board[ROWS][1]))
		board[ROWS][1] = '0';
	else if((board[ROWS][1] == board[ROWS][2])&&(board[ROWS][0] != board[ROWS][1]))
		board[ROWS][0] = '0';
*/
	else
	while (1)  
    {  
        int x = rand() % 3;  
        int y = rand() % 3;  
        if (board[x][y] == ' ')  
        {  
            board[x][y] = '0';  
            break;  
        } 
    }  
}  
static int is_full(char board[ROWS][COLS], int rows, int  cols)//仅在此文件内使用  
{  
    int i = 0;  
    int j = 0;  
    for (i = 0; i < rows; i++)  
    {  
        for (j = 0; j < cols; j++)  
        {  
            if (board[i][j] == ' ')  
                return 0;  
        }  
    }  
    return 1; 
}  
char check_win(char board[ROWS][COLS], int rows, int  cols)
{  
    int i = 0;  
    for (i = 0; i < rows; i++)  
    {  
        if ((board[i][0] == board[i][1]) && (board[i][1] == board[i][2]) && (board[i][1] != ' '))  
        {  
            return board[i][1];  
        }  
    }  
    for (i = 0; i < cols; i++)  
    {  
        if ((board[0][i] == board[1][i]) && (board[1][i] == board[2][i]) && (board[1][i] != ' '))  
        {  
            return board[1][i];  
        }  
    }  
    if ((board[0][0] == board[1][1]) && (board[1][1] == board[2][2]) && (board[1][1] != ' '))  
    {  
        return board[1][1];  
    }  
    if ((board[0][2] == board[1][1]) && (board[1][1] == board[2][0]) && (board[2][2] != ' '))  
    {  
        return board[1][1];  
    }  
    if (is_full(board, rows, cols))  
    {  
        return 'q';
    }  
    return ' ';  
}  
